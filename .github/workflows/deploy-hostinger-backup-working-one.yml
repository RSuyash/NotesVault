name: Deploy to Hostinger

on:
  push:
    branches:
      - master # Or your main deployment branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Use an appropriate LTS version

    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: ./notesvault-react-mvp

    - name: Build React App # Output goes to notesvault-react-mvp/dist
      run: npm run build
      working-directory: ./notesvault-react-mvp

    - name: Generate Production Config for API
      run: |
        echo "<?php" > api/config.prod.php
        echo "// Production Configuration (api/config.prod.php) - Generated by GitHub Actions" >> api/config.prod.php
        echo "// This file is loaded by config.php ONLY on the production server." >> api/config.prod.php
        echo "" >> api/config.prod.php
        echo "// --- Production Database Configuration ---" >> api/config.prod.php
        echo "define('DB_HOST', '${{ secrets.DB_HOST }}');" >> api/config.prod.php
        echo "define('DB_USER', '${{ secrets.DB_USER }}');" >> api/config.prod.php
        echo "define('DB_PASS', '${{ secrets.DB_PASS }}');" >> api/config.prod.php
        echo "define('DB_NAME', '${{ secrets.DB_NAME }}');" >> api/config.prod.php
        echo "" >> api/config.prod.php
        echo "// --- Production JWT Configuration ---" >> api/config.prod.php
        echo "define('JWT_SECRET_KEY', '${{ secrets.JWT_SECRET_KEY }}');" >> api/config.prod.php
        echo "" >> api/config.prod.php
        echo "// --- JWT Expiration Time (Using default from config.php unless overridden here) ---" >> api/config.prod.php
        echo "// define('JWT_EXPIRATION_TIME', 3600);" >> api/config.prod.php
        echo "" >> api/config.prod.php
        echo "?>" >> api/config.prod.php
      shell: bash

    - name: Prepare Staging Directory
      run: |
        mkdir deploy_staging
        # Copy React build output
        cp -r notesvault-react-mvp/dist/* deploy_staging/
        # Copy root .htaccess
        cp .htaccess deploy_staging/
        # Copy API directory contents (excluding logs and placeholder config if it exists)
        # Using rsync for better exclusion handling
        rsync -av --exclude 'config.prod.php' --exclude 'logs/' api/ deploy_staging/api/
        # Copy the *generated* production config into the staging API directory
        cp api/config.prod.php deploy_staging/api/
      shell: bash

    - name: Deploy Staging Directory to Hostinger
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.HOSTINGER_FTP_SERVER }}
        username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
        password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
        protocol: ftp # Or ftps, sftp
        port: 21 # Or 22 for SFTP
        local-dir: ./deploy_staging/ # Source: The staging directory we built
        server-dir: /public_html/ # Destination: Server root
        # Use clean slate to ensure server matches staging directory exactly
        dangerous-clean-slate: true
