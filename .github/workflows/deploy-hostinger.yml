name: Deploy to Hostinger

on:
  workflow_dispatch: # Allows manual triggering
  push:
    branches:
      - master
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install Frontend Dependencies
      run: npm ci
      working-directory: ./notesvault-react-mvp

    - name: Build React App
      env:
        VITE_API_BASE_URL: https://notesvault.in/api
      run: npm run build
      working-directory: ./notesvault-react-mvp

    - name: Verify Build Output
      run: |
        echo "Searching for '/api/login.php' in built JS..."
        JS_FILE=$(find ./notesvault-react-mvp/dist/assets -name 'index-*.js')
        if [ -z "$JS_FILE" ]; then echo "ERROR: Could not find built JS file!"; exit 1; fi
        echo "Checking file: $JS_FILE"
        if grep -q "/api/login.php" "$JS_FILE"; then echo "OK: Found correct API path '/api/login.php' in built JS."; else echo "ERROR: Did not find '/api/login.php' in built JS file!"; exit 1; fi
      shell: bash

    - name: Generate Production Config for API
      run: |
        echo "<?php" > api/config.prod.php
        echo "// Production Configuration (api/config.prod.php) - Generated by GitHub Actions" >> api/config.prod.php
        echo "define('DB_HOST', '${{ secrets.DB_HOST }}');" >> api/config.prod.php
        echo "define('DB_USER', '${{ secrets.DB_USER }}');" >> api/config.prod.php
        echo "define('DB_PASS', '${{ secrets.DB_PASS }}');" >> api/config.prod.php
        echo "define('DB_NAME', '${{ secrets.DB_NAME }}');" >> api/config.prod.php
        echo "define('JWT_SECRET_KEY', '${{ secrets.JWT_SECRET_KEY }}');" >> api/config.prod.php
        echo "?>" >> api/config.prod.php
      shell: bash

    - name: Prepare Staging Directory
      run: |
        mkdir deploy_staging
        # Copy React build output (including assets)
        cp -r notesvault-react-mvp/dist/* deploy_staging/
        # Copy root .htaccess
        cp .htaccess deploy_staging/
        # Copy API directory contents (excluding logs)
        rsync -av --exclude 'logs/' api/ deploy_staging/api/
        # Ensure the generated config.prod.php is included (overwrite if necessary)
        cp api/config.prod.php deploy_staging/api/
      shell: bash

    - name: Deploy Staging Directory to Hostinger
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.HOSTINGER_FTP_SERVER }}
        username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
        password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
        protocol: ftp # Or ftps, sftp
        port: 21 # Or 22 for SFTP
        local-dir: ./deploy_staging/ # Source: The staging directory
        server-dir: /public_html/ # Destination: Server root
        # Use clean slate to ensure server matches staging directory exactly
