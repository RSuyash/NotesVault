name: Deploy to Hostinger

on:
  push:
    branches:
      - master # Or 'main', depending on your default branch

jobs:
  deploy:
    runs-on: ubuntu-latest # Use a standard Linux runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # --- Frontend Build ---
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20' # Specify your Node.js version

    - name: Clean npm cache
      working-directory: ./notesvault-react-mvp
      run: npm cache clean --force

    - name: Install Frontend Dependencies (Clean Install)
      working-directory: ./notesvault-react-mvp # Specify frontend directory
      run: npm ci # Use clean install based on package-lock.json

    - name: Remove previous build output
      working-directory: ./notesvault-react-mvp
      run: rm -rf dist # Ensure a completely fresh build

    - name: Build Frontend
      working-directory: ./notesvault-react-mvp # Specify frontend directory
      env: # Set environment variables for this step
        VITE_API_BASE_URL: /notesvault-web/api # Update API base URL for frontend
      # The run command now uses the environment variable set above
      run: npm run build
      # Note: We use /api assuming PHP scripts are in public_html/api
      # If your final PHP API URL is different, adjust this build command accordingly.

    # --- Prepare Deployment Files ---
    # Create a temporary directory to gather all files for deployment
    # Files will be copied directly into the 'deploy' directory

    # Copy built frontend files into a 'notesvault' subdirectory
    - name: Copy frontend build to deploy directory
      run: mkdir -p deploy && cp -r ./notesvault-react-mvp/dist/* ./deploy/

    # Copy PHP API files
    - name: Copy PHP API to deploy directory
      run: cp -r ./api ./deploy/ # API files go into deploy/api/


    # Copy .htaccess file
    - name: Copy .htaccess to deploy directory
      run: cp ./.htaccess ./deploy/

    # --- Configure PHP Database ---
    # Replace placeholders in config.php with secrets
    # IMPORTANT: Ensure config.php in repo uses distinct placeholders
    - name: Configure api/config.php
      env:
        DB_HOST_SECRET: ${{ secrets.DB_HOST }}
        DB_USER_SECRET: ${{ secrets.DB_USER }}
        DB_PASS_SECRET: ${{ secrets.DB_PASS }}
        DB_NAME_SECRET: ${{ secrets.DB_NAME }}
        JWT_SECRET_KEY_SECRET: ${{ secrets.JWT_SECRET_KEY }}
      run: |
        perl -pi -e 's{define\(\x27DB_HOST\x27, \x27.*\x27\);}{define(\x27DB_HOST\x27, \x27$ENV{DB_HOST_SECRET}\x27);}' ./deploy/api/config.php
        perl -pi -e 's{define\(\x27DB_USER\x27, \x27.*\x27\);}{define(\x27DB_USER\x27, \x27$ENV{DB_USER_SECRET}\x27);}' ./deploy/api/config.php
        perl -pi -e 's{define\(\x27DB_PASS\x27, \x27.*\x27\);}{define(\x27DB_PASS\x27, \x27$ENV{DB_PASS_SECRET}\x27);}' ./deploy/api/config.php
        perl -pi -e 's{define\(\x27DB_NAME\x27, \x27.*\x27\);}{define(\x27DB_NAME\x27, \x27$ENV{DB_NAME_SECRET}\x27);}' ./deploy/api/config.php
        perl -pi -e 's{define\(\x27JWT_SECRET_KEY\x27, \x27.*\x27\);}{define(\x27JWT_SECRET_KEY\x27, \x27$ENV{JWT_SECRET_KEY_SECRET}\x27);}' ./deploy/api/config.php

        # Add sed command for frontend URL if needed in config.php

    # --- Deploy React App via FTP (No Clean Slate, Exclude API) --- # Force redeploy
    - name: FTP Deploy React App
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ${{ secrets.HOSTINGER_FTP_SERVER }}
        username: ${{ secrets.HOSTINGER_FTP_USERNAME }}
        password: ${{ secrets.HOSTINGER_FTP_PASSWORD }}
        local-dir: ./deploy/ # Source is the deploy directory
        server-dir: /public_html/notesvault-web/ # Target the subdirectory
        # No exclude needed, deploying the whole package
        log-level: verbose # Add verbose logging for debugging file uploads

        # dangerous-clean-slate: true # Avoid clean slate to prevent deletion errors
