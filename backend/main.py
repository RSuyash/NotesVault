from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import os # Import os
from dotenv import load_dotenv # Import load_dotenv

# --- Google Auth Imports ---
from google.oauth2 import id_token
from google.auth.transport import requests as google_requests

# --- Load Environment Variables ---
load_dotenv() # Load variables from .env file

# --- Configuration ---
GOOGLE_CLIENT_ID = os.getenv("GOOGLE_CLIENT_ID")
if not GOOGLE_CLIENT_ID:
    print("ERROR: GOOGLE_CLIENT_ID environment variable not set.")
    # In a real app, you might want to exit or raise a more specific configuration error
    # For now, we'll let the google_auth endpoint fail if it's missing.

# --- Pydantic Models ---
class TopicRequest(BaseModel):
    topic: str

class GoogleToken(BaseModel):
    credential: str # This holds the JWT ID token from the frontend

# --- Initialize FastAPI App ---
app = FastAPI()

# --- CORS Middleware ---
# Define allowed origins (consider loading from env vars too)
allowed_origins = [
    "http://localhost:5173", # React dev server
    "http://127.0.0.1:5173",
    # Add your production frontend URL here (e.g., os.getenv("FRONTEND_URL"))
]
# Filter out None values if loading from env vars
origins = [origin for origin in allowed_origins if origin]


app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# --- API Endpoints ---

@app.get("/")
async def root():
    return {"message": "NotesVault Backend is running"}

@app.post("/api/generate")
async def generate_notes(request: TopicRequest):
    # Placeholder logic: Just return a dummy response
    print(f"Received topic: {request.topic}") # Log received topic
    dummy_markdown = f"# Dummy Response for: {request.topic}\n\nThis is placeholder content generated by the backend."
    return {"success": True, "markdown": dummy_markdown}

@app.post("/api/auth/google")
async def google_auth(token: GoogleToken):
    """
    Receives Google ID token from frontend, verifies it,
    and (placeholder) returns user info.
    """
    if not GOOGLE_CLIENT_ID:
         raise HTTPException(status_code=500, detail="Server configuration error: Google Client ID not set.")

    try:
        # Verify the ID token.
        idinfo = id_token.verify_oauth2_token(
            token.credential, google_requests.Request(), GOOGLE_CLIENT_ID
        )

        # ID token is valid. Get user information.
        userid = idinfo['sub']
        email = idinfo.get('email')
        name = idinfo.get('name')
        picture = idinfo.get('picture')

        print(f"Google Auth Success: UserID={userid}, Email={email}, Name={name}")

        # --- TODO: Database Interaction & Session Management ---

        # Placeholder: Return verified user info
        return {
            "success": True,
            "message": "Google Sign-In Successful (Backend Verification)",
            "user_info": {
                "google_id": userid,
                "email": email,
                "name": name,
                "picture": picture
            }
        }

    except ValueError as e:
        print(f"Google Auth Error: Invalid token - {e}")
        raise HTTPException(status_code=401, detail=f"Invalid Google token: {e}")
    except Exception as e:
        print(f"Google Auth Error: An unexpected error occurred - {e}")
        raise HTTPException(status_code=500, detail=f"An unexpected error occurred during Google authentication: {e}")

# --- Run Server (for local development) ---
# uvicorn main:app --reload --port 8000